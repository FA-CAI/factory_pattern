package com.shangxue.factory_pattern_me.factoryMethod;



public class Test {


    public static void main(String[] args) {

       Factory factory=new MengniuFactory();   //扩展时（比如买牛奶产品时，咱想货比三家，不知道谁好谁坏，喝喝伊利怎么样？），就是改这里的【配置】：比如让它变成new YiliFactory()

        System.out.println(factory.getMilk());  //蹭了一点多态的便宜。通过多态的优点（用父类接收具体实例），让事情变得稍微优雅了点(生产产品这事，变得不仅专业化而且规模化了)（但复杂度和没有工厂这不一样吗？摔o(╥﹏╥)o，坑爹呢这是，感觉像个发育一半的怪胎。——所以，又有了下一阶，工厂兽超进化：抽象工厂模式！）


    }
}

/**
 *工厂不通过名字去用了。而通过调用该特异工厂的该方法，也就是通过调方法来产生了，所以叫“工厂方法（对于我们客户程序员而言，就是调用方法来生成实例，具体怎么生成的，new啊反射啊，又有什么产品工序（杀毒啊过滤啊几层包装啊），不关心，初级程序员不关心过程！）”
 *
 *可是我还是不得知道工厂名字吗，和之前不用不用工厂时要记住具体产品的类名，似乎没有优越在哪啊，一样让客户程序员感觉复杂蛋疼啊，只是记具体实现类的名，变成了记具体实现工厂类的名，这不仍一样蛋疼吗
 *
 * 所以，用户能不能也不用关心是"哪个工厂"呢——那么，势必又是要利用多态来实现，把工厂又给再向上抽象抽取一次~因此，有了抽象工厂！
 */

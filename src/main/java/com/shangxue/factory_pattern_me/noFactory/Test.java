package com.shangxue.factory_pattern_me.noFactory;


//用Test来模拟消费服务（服务端提供产品类,就好比"服务端提供接口,客户端消费接口"一个模式）的客户端
public class Test {


    public static void main(String[] args) {

        System.out.println(new BrightDairy().getName());
    }
}

/**
 *接口是不能直接new的，那么我们的“产品”需要我们知道具体的名字，这个new的过程比较复杂,产品类（实体类？）一多，我作为客户程序员我得清楚具体的每一个实现类我才能new实例啊，那真是一点都不灵活！(我希望用字符串别名代替我去背诵具体取了什么类型，因为我咋知道别人咋具体取名字的，虽说别人会见名知义，但是我也只能大概猜一猜名字会取成什么样，具体他到底取什么，我还是不确定的、无法精确控制的)
 *
 *这个好比我想和特仑苏，我得自己会造特仑苏。而我们实际生活是这样的吗？有人民币（工厂）则不需要自己new了
 *
 * 所以，为什么需要工厂模式？为什么会发展出工厂模式？为什么会必然发展出工厂模式（因为唯物辩证法？所以事物发展一定存在规律，历史总是惊人的相似，不论人类现实世界社会的发展还是代码世界编程思想模式(心态？)的发展）？
 * 1.“工厂”就是处理用户约产品之间的问题
 * 2.当我们初学java时，在实例化对象的时候通常用的是 New关键字。但是用new导致代码不够灵活（比如我改了类名，那么，客户程序员那边的代码也得变动，那得协调沟通，这就麻烦，浑身受限、牵一发动全身、高耦合了，不灵活！不符合开闭原则！），没啥扩展性（现在只有一个类，以后类似的类有十个？有一百个呢？其实这几个类是同一性质的，但是你那么原始地写的话，别人会根本看不出这几个类之间是有关系的，因此咱需要工厂来"统一管理"，既描述了之间的关系，抽象到同一个接口下了，又具有了一定扩展性，符合了开闭原则），写死了（硬编码），背诵或配置太多实现类，这个复杂、混乱，容易出错。（解决办法：工厂模式、反射）
 *
 */
